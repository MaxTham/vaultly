name: Auto Assign Issue Start/End Dates

on:
  issues:
    types: [opened, closed]

jobs:
  set-dates:
    runs-on: ubuntu-latest
    steps:
      - name: Set Start/End Dates in Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const orgLogin = "MaxTham"; // <-- your GitHub org
            const projectTitle = "Vaultly"; // <-- your project name
            const startFieldName = "Start date"; // must match exactly
            const endFieldName = "End date";     // must match exactly

            const dateToday = new Date().toISOString().split("T")[0];

            const issueNumber = context.payload.issue.number;
            const issueAuthor = context.payload.issue.user.login;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            // Auto assign the issue to the author
            try {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: issueNumber,
                assignees: [issueAuthor]
              });
              console.log(`üë§ Assigned issue #${issueNumber} to ${issueAuthor}`);
            } catch (error) {
              console.warn(`‚ö†Ô∏è Failed to assign issue: ${error.message}`);
            }

            // FIXED: GraphQL with union type handling
            const queryProjects = `
              query($org: String!) {
                organization(login: $org) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2FieldCommon {
                            id
                            name
                            dataType
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const response = await github.graphql(queryProjects, {
              org: orgLogin
            });

            const project = response.organization.projectsV2.nodes.find(p => p.title === projectTitle);
            if (!project) {
              core.setFailed("‚ùå Project not found in org");
              return;
            }

            const startField = project.fields.nodes.find(f => f.name === startFieldName);
            const endField = project.fields.nodes.find(f => f.name === endFieldName);

            if (!startField || !endField) {
              core.setFailed("‚ùå Could not find Start Date or End Date field in project");
              return;
            }

            const issueId = context.payload.issue.node_id;

            // Always add issue to project
            const addItemMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            const addedItem = await github.graphql(addItemMutation, {
              projectId: project.id,
              contentId: issueId
            });

            const itemId = addedItem.addProjectV2ItemById.item.id;

            const setDateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { date: $value }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            if (context.payload.action === "opened") {
              console.log("üìÖ Setting Start Date to", dateToday);
              await github.graphql(setDateMutation, {
                projectId: project.id,
                itemId,
                fieldId: startField.id,
                value: dateToday
              });
            }

            if (context.payload.action === "closed") {
              console.log("üìÖ Setting End Date to", dateToday);
              await github.graphql(setDateMutation, {
                projectId: project.id,
                itemId,
                fieldId: endField.id,
                value: dateToday
              });
            }
